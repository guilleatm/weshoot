//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/DefaultInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Weshoot.Input
{
    public partial class @DefaultInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInput"",
    ""maps"": [
        {
            ""name"": ""Action"",
            ""id"": ""63dabdf4-c16f-4ca2-9d89-7c5fc7faa3e5"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""9ab23ffe-6e87-468d-9403-a79fbf23af17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""c100e352-86d0-4255-9fbc-88a1b5fd3c7f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""523fe286-c113-4ecc-a1c0-1fde2ec97be9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""47e8a265-f7b9-4964-a053-bbb551ff285f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootAuto"",
                    ""type"": ""Button"",
                    ""id"": ""529ed142-7278-4faf-b9a6-d6cbbc982621"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9866564-89da-4942-8ce1-6d9b703f3710"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""183e3ce5-1b2a-4737-a3ed-cd004b1b4bd2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""672b7cd7-78d6-4fa1-a7d7-b9bb7e72d9ae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e568ed9a-32f8-4f10-843f-25f4bb3535ff"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04100d33-e8f4-4d80-8308-87d65eb7f783"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""61922140-38a9-4fac-b594-23bd5f2f4fef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""52ca4da9-771c-46e1-b864-8aa0367ddbf3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aba87ddf-88d7-46d5-86c8-f2c687126f01"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e6e036d-5d4f-447c-b79f-2e3855e2e537"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ShootAuto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Action
            m_Action = asset.FindActionMap("Action", throwIfNotFound: true);
            m_Action_Shoot = m_Action.FindAction("Shoot", throwIfNotFound: true);
            m_Action_Rotate = m_Action.FindAction("Rotate", throwIfNotFound: true);
            m_Action_Move = m_Action.FindAction("Move", throwIfNotFound: true);
            m_Action_Escape = m_Action.FindAction("Escape", throwIfNotFound: true);
            m_Action_ShootAuto = m_Action.FindAction("ShootAuto", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Action
        private readonly InputActionMap m_Action;
        private List<IActionActions> m_ActionActionsCallbackInterfaces = new List<IActionActions>();
        private readonly InputAction m_Action_Shoot;
        private readonly InputAction m_Action_Rotate;
        private readonly InputAction m_Action_Move;
        private readonly InputAction m_Action_Escape;
        private readonly InputAction m_Action_ShootAuto;
        public struct ActionActions
        {
            private @DefaultInput m_Wrapper;
            public ActionActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Shoot => m_Wrapper.m_Action_Shoot;
            public InputAction @Rotate => m_Wrapper.m_Action_Rotate;
            public InputAction @Move => m_Wrapper.m_Action_Move;
            public InputAction @Escape => m_Wrapper.m_Action_Escape;
            public InputAction @ShootAuto => m_Wrapper.m_Action_ShootAuto;
            public InputActionMap Get() { return m_Wrapper.m_Action; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ActionActions set) { return set.Get(); }
            public void AddCallbacks(IActionActions instance)
            {
                if (instance == null || m_Wrapper.m_ActionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ActionActionsCallbackInterfaces.Add(instance);
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @ShootAuto.started += instance.OnShootAuto;
                @ShootAuto.performed += instance.OnShootAuto;
                @ShootAuto.canceled += instance.OnShootAuto;
            }

            private void UnregisterCallbacks(IActionActions instance)
            {
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
                @Rotate.started -= instance.OnRotate;
                @Rotate.performed -= instance.OnRotate;
                @Rotate.canceled -= instance.OnRotate;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Escape.started -= instance.OnEscape;
                @Escape.performed -= instance.OnEscape;
                @Escape.canceled -= instance.OnEscape;
                @ShootAuto.started -= instance.OnShootAuto;
                @ShootAuto.performed -= instance.OnShootAuto;
                @ShootAuto.canceled -= instance.OnShootAuto;
            }

            public void RemoveCallbacks(IActionActions instance)
            {
                if (m_Wrapper.m_ActionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IActionActions instance)
            {
                foreach (var item in m_Wrapper.m_ActionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ActionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ActionActions @Action => new ActionActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IActionActions
        {
            void OnShoot(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnEscape(InputAction.CallbackContext context);
            void OnShootAuto(InputAction.CallbackContext context);
        }
    }
}
